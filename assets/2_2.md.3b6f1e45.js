import{_ as e,c as a,o as i,a as l}from"./app.1ddaa85c.js";const p=JSON.parse('{"title":"2 线性表(Linear List)","description":"","frontmatter":{},"headers":[{"level":2,"title":"2.1 线性表的定义和特点","slug":"_2-1-线性表的定义和特点","link":"#_2-1-线性表的定义和特点","children":[]},{"level":2,"title":"2.2 案例引入","slug":"_2-2-案例引入","link":"#_2-2-案例引入","children":[]},{"level":2,"title":"2.3 线性的类型定义","slug":"_2-3-线性的类型定义","link":"#_2-3-线性的类型定义","children":[{"level":3,"title":"两种基本的存储结构","slug":"两种基本的存储结构","link":"#两种基本的存储结构","children":[]}]},{"level":2,"title":"2.4 线性表的顺序表示和实现","slug":"_2-4-线性表的顺序表示和实现","link":"#_2-4-线性表的顺序表示和实现","children":[]},{"level":2,"title":"2.5 线性表的链式表示和实现","slug":"_2-5-线性表的链式表示和实现","link":"#_2-5-线性表的链式表示和实现","children":[]},{"level":2,"title":"2.6 线性表和链表的比较","slug":"_2-6-线性表和链表的比较","link":"#_2-6-线性表和链表的比较","children":[]},{"level":2,"title":"2.7 线性表的应用","slug":"_2-7-线性表的应用","link":"#_2-7-线性表的应用","children":[]},{"level":2,"title":"2.8 案例分析与实现","slug":"_2-8-案例分析与实现","link":"#_2-8-案例分析与实现","children":[]}],"relativePath":"2/2.md"}'),r={name:"2/2.md"},d=l('<h1 id="_2-线性表-linear-list" tabindex="-1">2 线性表(Linear List) <a class="header-anchor" href="#_2-线性表-linear-list" aria-hidden="true">#</a></h1><h2 id="_2-1-线性表的定义和特点" tabindex="-1">2.1 线性表的定义和特点 <a class="header-anchor" href="#_2-1-线性表的定义和特点" aria-hidden="true">#</a></h2><h2 id="_2-2-案例引入" tabindex="-1">2.2 案例引入 <a class="header-anchor" href="#_2-2-案例引入" aria-hidden="true">#</a></h2><h2 id="_2-3-线性的类型定义" tabindex="-1">2.3 线性的类型定义 <a class="header-anchor" href="#_2-3-线性的类型定义" aria-hidden="true">#</a></h2><h3 id="两种基本的存储结构" tabindex="-1">两种基本的存储结构 <a class="header-anchor" href="#两种基本的存储结构" aria-hidden="true">#</a></h3><ul><li>顺序存储结构</li><li>链式存储结构</li></ul><h2 id="_2-4-线性表的顺序表示和实现" tabindex="-1">2.4 线性表的顺序表示和实现 <a class="header-anchor" href="#_2-4-线性表的顺序表示和实现" aria-hidden="true">#</a></h2><ul><li><p>把逻辑上相邻的数据元素存储在物理上相邻的存储单元中的存储结构</p></li><li><p>线形表顺序存储结构占用一片连续的存储空间。知道某个元素的存储位置就可以计算出其他元素的存储位置。</p></li></ul><h2 id="_2-5-线性表的链式表示和实现" tabindex="-1">2.5 线性表的链式表示和实现 <a class="header-anchor" href="#_2-5-线性表的链式表示和实现" aria-hidden="true">#</a></h2><ul><li>结点在存储器中的位置是任意的，即逻辑上相邻的数据元素在物理上不一定相邻。</li><li>线性表的链式表又称为<code>非顺序映像</code>或<code>链式映像</code></li><li></li></ul><h2 id="_2-6-线性表和链表的比较" tabindex="-1">2.6 线性表和链表的比较 <a class="header-anchor" href="#_2-6-线性表和链表的比较" aria-hidden="true">#</a></h2><h2 id="_2-7-线性表的应用" tabindex="-1">2.7 线性表的应用 <a class="header-anchor" href="#_2-7-线性表的应用" aria-hidden="true">#</a></h2><h2 id="_2-8-案例分析与实现" tabindex="-1">2.8 案例分析与实现 <a class="header-anchor" href="#_2-8-案例分析与实现" aria-hidden="true">#</a></h2>',13),h=[d];function t(n,_,s,c,o,u){return i(),a("div",null,h)}const x=e(r,[["render",t]]);export{p as __pageData,x as default};
